{"version":3,"sources":["../src/index.js"],"names":["RealtimeBarrage","QueueBarrage","PixiBarrage","constructor","options","showMode","Error","window"],"mappings":"AAAA;;AAEA,OAAOA,eAAP,MAA4B,eAA5B;AACA,OAAOC,YAAP,MAAyB,YAAzB;;AAEA,MAAMC,WAAN,CAAkB;AAChBC,cAAYC,OAAZ,EAAqB;AACnB,QAAIC,WAAWD,QAAQC,QAAR,IAAoB,UAAnC;;AAEA,QAAGA,aAAa,OAAhB,EAAyB;AACvB,aAAO,IAAIJ,YAAJ,CAAiBG,OAAjB,CAAP;AACD,KAFD,MAEO,IAAGC,aAAa,UAAhB,EAA4B;AACjC,aAAO,IAAIL,eAAJ,CAAoBI,OAApB,CAAP;AACD,KAFM,MAEA;AACL,YAAM,IAAIE,KAAJ,CAAU,gCAAV,CAAN;AACD;AACF;AAXe;;AAclB;AACA,IAAGC,MAAH,EAAWA,OAAOL,WAAP,GAAqBA,WAArB;AACX,eAAeA,WAAf","file":"index.js","sourcesContent":["'use strict'\n\nimport RealtimeBarrage from './realtime.js'\nimport QueueBarrage from './queue.js'\n\nclass PixiBarrage {\n  constructor(options) {\n    let showMode = options.showMode || 'realtime'\n\n    if(showMode === 'queue') {\n      return new QueueBarrage(options)\n    } else if(showMode === 'realtime') {\n      return new RealtimeBarrage(options)\n    } else {\n      throw new Error('not supported `showMode` value')\n    }\n  }\n}\n\n// 添加至全局环境\nif(window) window.PixiBarrage = PixiBarrage\nexport default PixiBarrage\n"]}