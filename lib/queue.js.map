{"version":3,"sources":["../src/queue.js"],"names":["RealtimeBarrage","QueueBarrage","constructor","options","waitingList","rowCount","onRowOut","row","outedMap","_dealRowOut","barrage","i","next","shift","push","start","args","nextRow","_getNextOutedRow","getView","getCount","getWaitingCount","length","stop","clear","isStoped","destroy"],"mappings":"AAAA;;;;;;AAMA,OAAOA,eAAP,MAA4B,eAA5B;;AAEA,MAAMC,YAAN,CAAmB;AACjBC,cAAYC,OAAZ,EAAqB;AACnB,SAAKC,WAAL,GAAmB,EAAnB;AACA,QAAIC,WAAWF,QAAQE,QAAR,IAAoB,CAAnC;;AAEAF,YAAQG,QAAR,GAAoBC,GAAD,IAAS;AAC1B,WAAKC,QAAL,CAAcD,GAAd,IAAqB,IAArB;AACA,WAAKE,WAAL,CAAiBF,GAAjB;AACD,KAHD;;AAKA,SAAKG,OAAL,GAAe,IAAIV,eAAJ,CAAoBG,OAApB,CAAf;;AAEA;AACA,QAAIK,WAAW,EAAf;AACA,SAAI,IAAIG,IAAE,CAAV,EAAaA,KAAGN,QAAhB,EAA0BM,GAA1B,EAA+B;AAC7BH,eAASG,CAAT,IAAc,IAAd;AACD;AACD,SAAKH,QAAL,GAAgBA,QAAhB;AACD;;AAEDC,cAAYF,GAAZ,EAAiB;AACf,QAAIK,OAAO,KAAKR,WAAL,CAAiBS,KAAjB,EAAX;AACA,QAAGD,IAAH,EAAS;AACP,WAAKF,OAAL,CAAaI,IAAb,CAAkBF,IAAlB,EAAwBL,GAAxB;AACA,WAAKC,QAAL,CAAcD,GAAd,IAAqB,KAArB;AACD;AACF;;AAEDQ,UAAQ;AACN,SAAKL,OAAL,CAAaK,KAAb;AACD;;AAEDD,OAAKE,IAAL,EAAW;AACT,SAAKZ,WAAL,CAAiBU,IAAjB,CAAsBE,IAAtB;;AAEA,QAAIC,UAAU,KAAKC,gBAAL,EAAd;AACA,QAAGD,OAAH,EAAY;AACV,WAAKR,WAAL,CAAiBQ,OAAjB;AACD;AACF;;AAEDC,qBAAmB;AACjB,SAAI,IAAIX,GAAR,IAAe,KAAKC,QAApB,EAA8B;AAC5B,UAAG,KAAKA,QAAL,CAAcD,GAAd,CAAH,EAAuB;AACrB,eAAOA,GAAP;AACA;AACD;AACF;;AAED,WAAO,IAAP;AACD;;AAEDY,YAAU;AACR,WAAO,KAAKT,OAAL,CAAaS,OAAb,EAAP;AACD;;AAEDC,aAAW;AACT,WAAO,KAAKV,OAAL,CAAaU,QAAb,EAAP;AACD;;AAEDC,oBAAkB;AAChB,WAAO,KAAKjB,WAAL,CAAiBkB,MAAxB;AACD;;AAEDC,SAAO;AACL,SAAKb,OAAL,CAAaa,IAAb;AACD;;AAEDC,UAAQ;AACN,SAAKpB,WAAL,GAAmB,EAAnB;AACA,SAAI,IAAIG,GAAR,IAAe,KAAKC,QAApB,EAA8B;AAC5B,WAAKA,QAAL,CAAcD,GAAd,IAAqB,IAArB;AACD;AACD,SAAKG,OAAL,CAAac,KAAb;AACD;;AAEDC,aAAW;AACT,WAAO,KAAKf,OAAL,CAAae,QAAb,EAAP;AACD;;AAEDC,YAAU;AACR,SAAKhB,OAAL,CAAagB,OAAb;AACD;AAlFgB;;AAqFnB,eAAezB,YAAf","file":"queue.js","sourcesContent":["/*\n * 队列式弹幕组件\n *  - 弹幕会顺序展示，并保持固定的间隔\n *  - 量大时展示会有一定的延迟\n */\n\nimport RealtimeBarrage from './realtime.js'\n\nclass QueueBarrage {\n  constructor(options) {\n    this.waitingList = []\n    let rowCount = options.rowCount || 3\n\n    options.onRowOut = (row) => {\n      this.outedMap[row] = true\n      this._dealRowOut(row)\n    }\n\n    this.barrage = new RealtimeBarrage(options)\n\n    // 各行统计数据，用于确定下一条弹幕放在哪一行\n    let outedMap = {}\n    for(let i=1; i<=rowCount; i++) {\n      outedMap[i] = true\n    }\n    this.outedMap = outedMap\n  }\n\n  _dealRowOut(row) {\n    let next = this.waitingList.shift()\n    if(next) {\n      this.barrage.push(next, row)\n      this.outedMap[row] = false\n    }\n  }\n\n  start() {\n    this.barrage.start()\n  }\n\n  push(args) {\n    this.waitingList.push(args)\n\n    let nextRow = this._getNextOutedRow()\n    if(nextRow) {\n      this._dealRowOut(nextRow)\n    }\n  }\n\n  _getNextOutedRow() {\n    for(let row in this.outedMap) {\n      if(this.outedMap[row]) {\n        return row\n        break\n      }\n    }\n\n    return null\n  }\n\n  getView() {\n    return this.barrage.getView()\n  }\n\n  getCount() {\n    return this.barrage.getCount()\n  }\n\n  getWaitingCount() {\n    return this.waitingList.length\n  }\n\n  stop() {\n    this.barrage.stop()\n  }\n\n  clear() {\n    this.waitingList = []\n    for(let row in this.outedMap) {\n      this.outedMap[row] = true\n    }\n    this.barrage.clear()\n  }\n\n  isStoped() {\n    return this.barrage.isStoped()\n  }\n\n  destroy() {\n    this.barrage.destroy()\n  }\n}\n\nexport default QueueBarrage\n"]}